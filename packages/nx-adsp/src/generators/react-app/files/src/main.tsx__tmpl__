import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import { Provider } from 'react-redux';
import {
  CallbackComponent,
  loadUser,
  OidcProvider,
  SignoutCallbackComponent,
} from 'redux-oidc';

import { environment } from './environments/environment';
import { createUserManager } from './access';
import App from './app/app';
import { initializeConfig } from './app/config.slice';
import { store } from './store';

// Fetch configuration from web server; otherwise fallback to static environment.
fetch('/config/config.json')
  .then(res => res.ok ? 
    res.json() : 
    environment
  )
  .then((env) => {

    store.dispatch(initializeConfig(env));
    const userManager = createUserManager(env.access);
    loadUser(store, userManager);
    
    ReactDOM.render(
      <Provider store={store}>
        <OidcProvider store={store} userManager={userManager}>
          <React.StrictMode>
            <Router>
              <Switch>
                <Route 
                  path="/auth/callback" 
                  render={({history}) => 
                    <CallbackComponent 
                      userManager={userManager} 
                      successCallback={() => history.push('/')}
                      errorCallback={() => history.push('/')}
                    >
                      <span>signing in...</span>
                    </CallbackComponent>
                  }
                />
                <Route
                  path="/signout/callback" 
                  render={({history}) => 
                    <SignoutCallbackComponent 
                      userManager={userManager} 
                      successCallback={() => history.push('/')}
                      errorCallback={() => history.push('/')}
                    >
                      <span>signing out...</span>
                    </SignoutCallbackComponent>
                  }
                />
                <Route>
                  <App userManager={userManager} />
                </Route>
              </Switch>
            </Router>
          </React.StrictMode>
        </OidcProvider>
      </Provider>,
      document.getElementById('root')
    );
  });
