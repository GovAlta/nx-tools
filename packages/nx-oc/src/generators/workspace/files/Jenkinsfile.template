def baseCommand = '--all'
def affectedApps = []

pipeline {
  agent {
    node {
      label 'node12'
    }
  }
  parameters {
    string(
      name: 'affectedBase',
      defaultValue: '',
      description: 'Base command for nx affected; use --base={Commit SHA} or --all.'
    )
  }
  stages {
    stage('Prepare') {
      steps {
        checkout scm
        sh 'npm install'
        script {
          if (params.affectedBase) {
            baseCommand = affectedBase
          } else if (env.GIT_PREVIOUS_SUCCESSFUL_COMMIT) {
            baseCommand = "--base=${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT}"
          }

          affectedApps = sh (
            script: "npx nx affected:apps --plain ${baseCommand}",
            returnStdout: true
          ).split()
        }
        echo "Building with base ${baseCommand} and affected apps: ${affectedApps.join(', ')}"
      }
    }
    stage('Lint') {
      steps {
        sh "npx nx affected --target=lint ${baseCommand} --parallel"
      }
    }
    stage('Test') {
      steps {
        sh "npx nx affected --target=test ${baseCommand} --parallel"
      }
    }
    stage('Build') {
      steps {
        sh "npx nx affected --target=build ${baseCommand} --parallel"
        script {
          openshift.withCluster() {
            openshift.withProject('<%= ocInfraProject %>') {
              affectedApps.each { affected ->
                def bc = openshift.selector("bc", affected)
                if ( bc.exists() ) {
                  bc.startBuild("--from-dir=.", "--wait", "--follow")
                }
              }
            }
          }
        }
      }
    }
    stage('Deploy Dev') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject('<%= ocInfraProject %>') {
              affectedApps.each { affected ->
                def is = openshift.selector("is", "${affected}")
                if ( is.exists() ) {
                  openshift.tag("${affected}:latest", "${affected}:dev")
                }
              }
            }
          }
        }
        script {
          openshift.withCluster() {
            openshift.withProject('<%= ocDevProject %>') {
              affectedApps.each { affected ->
                def dc = openshift.selector("dc", "${affected}")
                if ( dc.exists() ) {
                  def rm = dc.rollout()
                  rm.latest()
                  rm.status()
                }
              }
            }
          }
        }
      }
    }
  }
}
